/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.product.information.avro.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Brand extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2537838374862717045L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Brand\",\"namespace\":\"com.product.information.avro.model\",\"fields\":[{\"name\":\"brandId\",\"type\":{\"type\":\"long\",\"java-class\":\"java.lang.Long\"}},{\"name\":\"brandName\",\"type\":[\"null\",\"string\"]},{\"name\":\"imageUrl\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Brand> ENCODER =
      new BinaryMessageEncoder<Brand>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Brand> DECODER =
      new BinaryMessageDecoder<Brand>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Brand> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Brand> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Brand> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Brand>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Brand to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Brand from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Brand instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Brand fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long brandId;
  @Deprecated public java.lang.CharSequence brandName;
  @Deprecated public java.lang.CharSequence imageUrl;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Brand() {}

  /**
   * All-args constructor.
   * @param brandId The new value for brandId
   * @param brandName The new value for brandName
   * @param imageUrl The new value for imageUrl
   */
  public Brand(java.lang.Long brandId, java.lang.CharSequence brandName, java.lang.CharSequence imageUrl) {
    this.brandId = brandId;
    this.brandName = brandName;
    this.imageUrl = imageUrl;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return brandId;
    case 1: return brandName;
    case 2: return imageUrl;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: brandId = (java.lang.Long)value$; break;
    case 1: brandName = (java.lang.CharSequence)value$; break;
    case 2: imageUrl = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'brandId' field.
   * @return The value of the 'brandId' field.
   */
  public long getBrandId() {
    return brandId;
  }


  /**
   * Sets the value of the 'brandId' field.
   * @param value the value to set.
   */
  public void setBrandId(long value) {
    this.brandId = value;
  }

  /**
   * Gets the value of the 'brandName' field.
   * @return The value of the 'brandName' field.
   */
  public java.lang.CharSequence getBrandName() {
    return brandName;
  }


  /**
   * Sets the value of the 'brandName' field.
   * @param value the value to set.
   */
  public void setBrandName(java.lang.CharSequence value) {
    this.brandName = value;
  }

  /**
   * Gets the value of the 'imageUrl' field.
   * @return The value of the 'imageUrl' field.
   */
  public java.lang.CharSequence getImageUrl() {
    return imageUrl;
  }


  /**
   * Sets the value of the 'imageUrl' field.
   * @param value the value to set.
   */
  public void setImageUrl(java.lang.CharSequence value) {
    this.imageUrl = value;
  }

  /**
   * Creates a new Brand RecordBuilder.
   * @return A new Brand RecordBuilder
   */
  public static com.product.information.avro.model.Brand.Builder newBuilder() {
    return new com.product.information.avro.model.Brand.Builder();
  }

  /**
   * Creates a new Brand RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Brand RecordBuilder
   */
  public static com.product.information.avro.model.Brand.Builder newBuilder(com.product.information.avro.model.Brand.Builder other) {
    if (other == null) {
      return new com.product.information.avro.model.Brand.Builder();
    } else {
      return new com.product.information.avro.model.Brand.Builder(other);
    }
  }

  /**
   * Creates a new Brand RecordBuilder by copying an existing Brand instance.
   * @param other The existing instance to copy.
   * @return A new Brand RecordBuilder
   */
  public static com.product.information.avro.model.Brand.Builder newBuilder(com.product.information.avro.model.Brand other) {
    if (other == null) {
      return new com.product.information.avro.model.Brand.Builder();
    } else {
      return new com.product.information.avro.model.Brand.Builder(other);
    }
  }

  /**
   * RecordBuilder for Brand instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Brand>
    implements org.apache.avro.data.RecordBuilder<Brand> {

    private long brandId;
    private java.lang.CharSequence brandName;
    private java.lang.CharSequence imageUrl;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.product.information.avro.model.Brand.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.brandId)) {
        this.brandId = data().deepCopy(fields()[0].schema(), other.brandId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.brandName)) {
        this.brandName = data().deepCopy(fields()[1].schema(), other.brandName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.imageUrl)) {
        this.imageUrl = data().deepCopy(fields()[2].schema(), other.imageUrl);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Brand instance
     * @param other The existing instance to copy.
     */
    private Builder(com.product.information.avro.model.Brand other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.brandId)) {
        this.brandId = data().deepCopy(fields()[0].schema(), other.brandId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.brandName)) {
        this.brandName = data().deepCopy(fields()[1].schema(), other.brandName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.imageUrl)) {
        this.imageUrl = data().deepCopy(fields()[2].schema(), other.imageUrl);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'brandId' field.
      * @return The value.
      */
    public long getBrandId() {
      return brandId;
    }


    /**
      * Sets the value of the 'brandId' field.
      * @param value The value of 'brandId'.
      * @return This builder.
      */
    public com.product.information.avro.model.Brand.Builder setBrandId(long value) {
      validate(fields()[0], value);
      this.brandId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'brandId' field has been set.
      * @return True if the 'brandId' field has been set, false otherwise.
      */
    public boolean hasBrandId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'brandId' field.
      * @return This builder.
      */
    public com.product.information.avro.model.Brand.Builder clearBrandId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'brandName' field.
      * @return The value.
      */
    public java.lang.CharSequence getBrandName() {
      return brandName;
    }


    /**
      * Sets the value of the 'brandName' field.
      * @param value The value of 'brandName'.
      * @return This builder.
      */
    public com.product.information.avro.model.Brand.Builder setBrandName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.brandName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'brandName' field has been set.
      * @return True if the 'brandName' field has been set, false otherwise.
      */
    public boolean hasBrandName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'brandName' field.
      * @return This builder.
      */
    public com.product.information.avro.model.Brand.Builder clearBrandName() {
      brandName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'imageUrl' field.
      * @return The value.
      */
    public java.lang.CharSequence getImageUrl() {
      return imageUrl;
    }


    /**
      * Sets the value of the 'imageUrl' field.
      * @param value The value of 'imageUrl'.
      * @return This builder.
      */
    public com.product.information.avro.model.Brand.Builder setImageUrl(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.imageUrl = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'imageUrl' field has been set.
      * @return True if the 'imageUrl' field has been set, false otherwise.
      */
    public boolean hasImageUrl() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'imageUrl' field.
      * @return This builder.
      */
    public com.product.information.avro.model.Brand.Builder clearImageUrl() {
      imageUrl = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Brand build() {
      try {
        Brand record = new Brand();
        record.brandId = fieldSetFlags()[0] ? this.brandId : (java.lang.Long) defaultValue(fields()[0]);
        record.brandName = fieldSetFlags()[1] ? this.brandName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.imageUrl = fieldSetFlags()[2] ? this.imageUrl : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Brand>
    WRITER$ = (org.apache.avro.io.DatumWriter<Brand>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Brand>
    READER$ = (org.apache.avro.io.DatumReader<Brand>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.brandId);

    if (this.brandName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.brandName);
    }

    if (this.imageUrl == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.imageUrl);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.brandId = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.brandName = null;
      } else {
        this.brandName = in.readString(this.brandName instanceof Utf8 ? (Utf8)this.brandName : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.imageUrl = null;
      } else {
        this.imageUrl = in.readString(this.imageUrl instanceof Utf8 ? (Utf8)this.imageUrl : null);
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.brandId = in.readLong();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.brandName = null;
          } else {
            this.brandName = in.readString(this.brandName instanceof Utf8 ? (Utf8)this.brandName : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.imageUrl = null;
          } else {
            this.imageUrl = in.readString(this.imageUrl instanceof Utf8 ? (Utf8)this.imageUrl : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










