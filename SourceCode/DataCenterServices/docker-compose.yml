version: "3"

services:
  zookeeper:
      image: confluentinc/cp-zookeeper:5.4.0
      hostname: zookeeper
      container_name: zookeeper
      ports:
        - "2181:2181"
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000

  broker:
      image: confluentinc/cp-server:5.4.0
      hostname: broker
      container_name: broker
      depends_on:
        - zookeeper
      ports:
      - "9092:9092"
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
        KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
        CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
        CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
        CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
        CONFLUENT_METRICS_ENABLE: "true"
        CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"

  kafka-tools:
      image: confluentinc/cp-kafka:5.4.0
      hostname: kafka-tools
      container_name: kafka-tools
      command: ["tail", "-f", "/dev/null"]
      network_mode: "host"

  schema-registry:
      image: confluentinc/cp-schema-registry:5.4.0
      hostname: schema-registry
      container_name: schema-registry
      depends_on:
        - zookeeper
        - broker
      ports:
        - "8081:8081"
      environment:
        SCHEMA_REGISTRY_HOST_NAME: schema-registry
        SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"

  control-center:
      image: confluentinc/cp-enterprise-control-center:5.4.0
      hostname: control-center
      container_name: control-center
      depends_on:
        - zookeeper
        - broker
        - schema-registry
      ports:
        - "9021:9021"
      environment:
        CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
        CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
        CONTROL_CENTER_REPLICATION_FACTOR: 1
        CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
        CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
        CONFLUENT_METRICS_TOPIC_REPLICATION: 1
        PORT: 9021

  postgresdb:
    image: postgres
    restart: unless-stopped
    env_file: ./.env
    environment:
      - POSTGRES_USER=$POSTGRESDB_USER
      - POSTGRES_PASSWORD=$POSTGRESDB_ROOT_PASSWORD
      - POSTGRES_DB=$POSTGRESDB_DATABASE
    ports:
      - $POSTGRESDB_LOCAL_PORT:$POSTGRESDB_DOCKER_PORT

  mongodb:
    image: mongo:5.0.2
    restart: unless-stopped
    env_file: ./.env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_ROOT_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_ROOT_PASSWORD
      - MONGO_INITDB_DATABASE=$MONGO_DB
      - MONGO_DB_USERNAME=$MONGODB_USER
      - MONGO_DB_PASSWORD=$MONGODB_PASSWORD
    ports:
      - $MONGODB_LOCAL_PORT:$MONGODB_DOCKER_PORT

  product-source:
    build:
      context: ./ProductSourceService
    env_file: ./.env
    depends_on:
      - mongodb
      - broker  
    environment:
      - SERVER_PORT=8082
      - SPRING_APPLICATION_NAME=$PRODUCT_SOURCE_APP_NAME
      - SPRING_DATA_MONGODB_URI=mongodb://$MONGODB_USER:$MONGODB_PASSWORD@mongodb:$MONGODB_DOCKER_PORT/$MONGO_DB?authSource=admin
      - SPRING_DATA_MONGODB_DATABASE=$MONGO_DB
      - MONGO_COLLECTION_NAME=products
      - MONGO_OUTBOX_COLLECTION_NAME=products_outbox
      - LOGGING_LEVEL_COM_PRODUCT_SOURCE=DEBUG
      - APP_MESSAGE_TOPIC=producttopic
    ports:
      - "8082:8082"  
    
  product-data:
    build:
      context: ./ProductDataService
    env_file: ./.env	  
    depends_on:
      - postgresdb
      - broker
    environment:
      - SPRING_APPLICATION_NAME=$PRODUCT_DATA_APP_NAME
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresdb:$POSTGRESDB_DOCKER_PORT/$POSTGRESDB_DATABASE
      - SPRING_DATASOURCE_USERNAME=$POSTGRESDB_USER
      - SPRING_DATASOURCE_PASSWORD=$POSTGRESDB_ROOT_PASSWORD
      - SPRING_DATASOURCE_DRIVER-CLASS-name=org.postgresql.Driver
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - LOGGING_LEVEL_COM_PRODUCT_DATA=DEBUG
      - SPRING_KAFKA_LISTENER_ACK-MODE=MANUAL_IMMEDIATE
      - APP_MESSAGE_TOPIC=producttopic
      - APP_DLQ_TOPIC=dlqtopic
      - RETRY_COUNT_LIMIT=3
    ports:
      - "8083:8083"

  product-information:
    build:
      context: ./ProductInformationService
    env_file: ./.env
    depends_on:
      - postgresdb
      - broker
      - schema-registry
    environment:
      - SERVER_PORT=8084
      - SPRING_APPLICATION_NAME=$PRODUCT_INFORMATION_APP_NAME
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresdb:$POSTGRESDB_DOCKER_PORT/$POSTGRESDB_DATABASE
      - SPRING_DATASOURCE_USERNAME=$POSTGRESDB_USER
      - SPRING_DATASOURCE_PASSWORD=$POSTGRESDB_ROOT_PASSWORD
      - SPRING_DATASOURCE_DRIVER-CLASS-name=org.postgresql.Driver
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_KAFKA_PRODUCER_PROPERTIES_SCHEMA_REGISTRY_URL=schema-registry:8081
      - SPRING_KAFKA_CONSUMER_PROPERTIES_SCHEMA_REGISTRY_URL=schema-registry:8081
    ports:
      - "8084:8084"

# commands to run
# docker-compose up -d -- run (-d start flag in background);
# docker-compose down -- stop
# docker-compose ps -- show running processes